What is GIT?
  //GIT is decentralized and distributed version control system
  //Free and opensource
  //Huge Community
  //Wide adoption and Integration
  
 What is a repository?
  //Within Git, the collection of version controlled files being managed,
  and their history, is considered the repository.
  //collection of files managed by GIT
  //history(all of it)
  //working directory/workspace
  //hidden .git folder

What is GIT commit?
  //Git works by saving the current state of all of its files it manages into a snapshot called commits
  //snapshots are commits
  //one or more file changes
  //It is important to note that git versions files not folders.
  //As you make changes commits are saved onto the timeline, known as a branch.
  //A git repo will normally have atleast one branch. And that is called master branch.
  
What is GitHub?
  //Most popular Git Hosting Platform
  
How to install GIT?
  //windows
  
  //mac
  git version
  git config --global user.name "Your Name"
  git config --global user.email "your.email@your-place.com"
  git config core.editor "mate -w"
  git config --global -e

  Configure P4Merge as Diff Tool in Git:
  git config --global diff.tool p4merge
  git config --global difftool.p4merge.path "/Applications/p4merge.app/Contents/MacOS/p4merge"
  git config --global difftool.prompt false
  
  Configure P4Merge as Merge Tool in Git:
  git config --global merge.tool p4merge
  git config --global mergetool.p4merge.path "/Applications/p4merge.app/Contents/MacOS/p4merge"
  git config --global mergetool.prompt false
  
 How to create a new git repository locally?
    mkdir projects
    cd projects
    git init demo
    Initialized empty Git repository in /Users/soumyasurajita/Desktop/git/projects/demo/.git/
    cd demo
    ls -al
    //we will see only .git folder
    
 What are the local git states?
    //It has 3 states
    1.working directory 
      //Working directory contains all the files and folders for your application.
       which may or may not be managed by git.
    2.staging area
      //used to prepare for next commit.
      //Files are moved form the modified working directory to git staging area and finally committed to git repository.
    3.repository(.git folder)
      //git repository or commit history contains all the committed or saved changes to the git repository
      //Anything here is a part of git history
      
First commit in git?
  //cd demo
  //cat README.md
  //Add below content to file and save it.
  # Demo Project
  This is a simple README file
  //ls
  README.md
  //git status
  On branch master
  No commits yet
  Untracked files:
    (use "git add <file>..." to include in what will be committed)
    .DS_Store
	  README.md
  nothing added to commit but untracked files present (use "git add" to track)
  //git add README.md 
  //git status
  On branch master
  No commits yet
  Changes to be committed:
    (use "git rm --cached <file>..." to unstage)
      new file:   README.md
  Untracked files:
    (use "git add <file>..." to include in what will be committed)
	    .DS_Store
  //git add .DS_Store
  git status
  On branch master
  No commits yet
  Changes to be committed:
    (use "git rm --cached <file>..." to unstage)
      new file:   .DS_Store
	    new file:   README.md

  //git commit -m "First file in demo repo"
  [master (root-commit) 7f31fb7] First file in demo repo
  2 files changed, 3 insertions(+)
  create mode 100644 .DS_Store
  create mode 100644 README.md

  //It will give a commit id 
  //git status
  On branch master
  nothing to commit, working tree clean

How .git folder works after a commit?
  .git folder will keep the history of changes.
  We are not supposed to modify this .git folder.
  We should be very careful dealing with it.
  
  If we delete .git folder from our demo project lets see what happens.
  //rm -rf .git
  //git status
  fatal: not a git repository (or any of the parent directories): .git
  
  We can get .git folder back by using below git init command again.
  //cd demo
  //ls -al
  total 24
  drwxr-xr-x  4 soumyasurajita  staff   128 Jun 14 00:06 .
  drwxr-xr-x  3 soumyasurajita  staff    96 Jun 13 23:25 ..
  -rw-r--r--@ 1 soumyasurajita  staff  6148 Jun 13 23:43 .DS_Store
  -rw-r--r--  1 soumyasurajita  staff    45 Jun 13 23:53 README.md
  //git init .
  Initialized empty Git repository in /Users/soumyasurajita/Desktop/git/projects/demo/.git/
  //Now lets do ls -al again. We should see the .git folder again.
  ls -al
  total 24
  drwxr-xr-x  5 soumyasurajita  staff   160 Jun 14 00:09 .
  drwxr-xr-x  3 soumyasurajita  staff    96 Jun 13 23:25 ..
  -rw-r--r--@ 1 soumyasurajita  staff  6148 Jun 13 23:43 .DS_Store
  drwxr-xr-x  9 soumyasurajita  staff   288 Jun 14 00:09 .git
  -rw-r--r--  1 soumyasurajita  staff    45 Jun 13 23:53 README.md

  
  //git status
  On branch master
  No commits yet
  Untracked files:
    (use "git add <file>..." to include in what will be committed)
      .DS_Store
       README.md
  nothing added to commit but untracked files present (use "git add" to track)
  
  ** This is because we have deleted the .git repository.
    These particular files were being tracked by previous git repository.
    Now we have a brand new git repository hence these files showing as untracked.
    This version of the git repository has no prior knowledge of the README.md or .DS_STORE file.
    
  Now lets create another file - LICENSE.md
  //cd demo
  //cat license.md
  Add below text to file
  # LICENSE
  ## Apache 2.0

  //git status
  On branch master
  No commits yet
  Untracked files:
    (use "git add <file>..." to include in what will be committed)
      .DS_Store
      LICENSE.md
      README.md
  nothing added to commit but untracked files present (use "git add" to track)
  
  //Add all files together
  //git add .
  //git status
  On branch master
  No commits yet
  Changes to be committed:
  	(use "git rm --cached <file>..." to unstage)
		new file:   .DS_Store
		new file:   LICENSE.md
		new file:   README.md


What is the difference between git add filename vs git add . ?

How to write a commit message in a code editor that we already setup?
	//git commit (and hit enter)
	//It should open up commit window where we can type multiline
	
How to get the commit history with log?
	//git status
	On branch master
	nothing to commit, working tree clean
	
	Since we just performed a commit we do not have anything new to commit. working directory is clean now.
	
	//git log
	commit 53c4589d5bdd4fde08db657b6a724a55d0b54ae9 (HEAD -> master)
	Author: soumyasurajita <ssurajita111@gmail.com>
	Date:   Sun Jun 14 00:26:17 2020 +0530
    	all files - license.md,readme.md,ds_store

	** gitlog will show the commit history - information about all past commits.
	Here we have only one because we have committed only once with new .git repo
	
	//git show
	commit 53c4589d5bdd4fde08db657b6a724a55d0b54ae9 (HEAD -> master)
	Author: soumyasurajita <ssurajita111@gmail.com>
	Date:   Sun Jun 14 00:26:17 2020 +0530
    	all files - license.md,readme.md,ds_store
	diff --git a/.DS_Store b/.DS_Store
	new file mode 100644
	index 0000000..bcdcacf
	Binary files /dev/null and b/.DS_Store differ
	diff --git a/LICENSE.md b/LICENSE.md
	new file mode 100644
	index 0000000..aac77e3
	--- /dev/null
	+++ b/LICENSE.md
	@@ -0,0 +1,3 @@
	+# LICENSE
	+
	+## Apache 2.0
	diff --git a/README.md b/README.md
	new file mode 100644
	index 0000000..4f16a62
	--- /dev/null


What is differences between git show and git log?
	//git log shows all commits
	//git show shows last commit with the differences
	
	
What is express commit?
	//Any tracked or untracked files we need to push it to staging area and then we need to do commit.
	//If we do both together using one command then it is known to be express commit.
	
	//if we do not add new or modified files to staging area then our commit wont happen.
	//It will give below error
	Changes not staged for commit:
	modified:   README.md
	

	//modify README.md. Add ## Heading 2
	# Demo Project
	This is a simple README file
	## Heading 2
	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")

	//git ls-files
	.DS_Store
	LICENSE.md
	README.md
	
	//express commit ex below
	//git commit -am "Updating README" 
	[master 4162d07] Updating README
 	1 file changed, 2 insertions(+)


What do you understand by tracked and untracked files?
	//tracked files are those which have git history means atleast committed once and then modified again
		e.g all modified files are tracked files
	//untracked files arenewly created files - no mapping to git repo happened yet
	
What is git ls-files?
	//this is going to list down only tracked files.
	
If a file is in staging area ready to commit, how we can move it back to working directory or unstage it?
	//modify README.md. Add -> Doing something that should be backed out.
	# Demo Project
	This is a simple README file
	## Heading 2
	Doing something that should be backed out.
	
	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	
	//git add .
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			modified:   README.md

	**But here if i determine that I really dont need those changes then we can use below command
	//git reset HEAD README.md
	Unstaged changes after reset:
	M	README.md

	But if we open the README.md file the added text will still be available.But it is just unstaged.
	Lets run git status again.
	
	//git status => it will show that file is modified and not staged for commit.
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	
	** But in order to revert back the changes completely we have to use below command
	//git checkout -- README.md
	//git status
	On branch master
	nothing to commit, working tree clean

Git log options to get the information of git history in different format?
	//git log --oneline --graph --decorate --all
	--oneline - to show in single line
	--graph - asterick based graph or sequence it will be shown
	--decorate - this tell us which commits are part of which branches
	--all - provide history of all branches available in this repository
	
How to create a git alias?
	//a new command to shorten a bigger command 
	//The syntax is 
	//git config --global alias.hist "log --oneline --graph --decorate --all"
	//To check all the config list
	//git config --global --list 
	user.name=soumyasurajita
	user.email=ssurajita111@gmail.com
	diff.tool=p4merge
	difftool.p4merge.path=/Applications/p4merge.app/Contents/MacOS/p4merge
	difftool.prompt=false
	merge.tool=p4merge
	mergetool.p4merge.path=/Applications/p4merge.app/Contents/MacOS/p4merge
	mergetool.prompt=false
	alias.hist=log --oneline --graph --decorate --all

	//git hist
	* 4162d07 (HEAD -> master) Updating README
	* 53c4589 all files - license.md,readme.md,ds_store

How to rename and delete a file using git command?
	//cd demo
	//cat example.txt
	//git status
	On branch master
	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			example.txt
	nothing added to commit but untracked files present (use "git add" to track)
	//git add example.txt
	//git commit -m "adding example file"
	[master 04120eb] adding example file
 	1 file changed, 0 insertions(+), 0 deletions(-)
 	create mode 100644 example.txt

	//**renaming a file
	//git mv example.txt demo.txt
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			renamed:    example.txt -> demo.txt
	//Now it is already moved to staging area we just need to commit.
	//git commit -m "renaming example"
	[master 024ebfa] renaming example
 	1 file changed, 0 insertions(+), 0 deletions(-)
 	rename example.txt => demo.txt (100%)

	//delete file demo.txt
	//ls
	LICENSE.md	README.md	demo.txt
	//git rm demo.txt
	rm 'demo.txt'
	//ls
	LICENSE.md	README.md
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			deleted:    demo.txt
	
	//Now it is already moved to staging area we just need to commit.
	//git commit -m "deleting demo file"
	[master 96aabeb] deleting demo file
 	1 file changed, 0 insertions(+), 0 deletions(-)
 	delete mode 100644 demo.txt


How to rename and delete a file using bash command?
	//cd demo
	//ls
	LICENSE.md	README.md
	//touch myfile.txt
	//ls
	LICENSE.md	README.md	myfile.txt
	//mv LICENSE.md LICENSE.txt
	//ls
	LICENSE.txt	README.md	myfile.txt

	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add/rm <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			deleted:    LICENSE.md

	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			LICENSE.txt
			myfile.txt
	no changes added to commit (use "git add" and/or "git commit -a")


	//When we use bash commands for renaming a file and addng a new file,
	new file is showed under untracked files which is expected.
	But at same time the renamed file name is also showed in untracked files. i.e.LICENSE.txt
	
	Also license.md at same time will be displayed as not yet staged for commit..
	unlike we used git command -> "git mv LICENSE.md LICENSE.txt" , we used here "mv LICENSE.md LICENSE.txt"
	The main difference is in git commands this is alredy staged we just had to commit. (shows "renaming")
	In came of normal bash command we have to move it to stage and then commit..(shows "deleting" and "adding")
	
	//git add -u
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			deleted:    LICENSE.md

	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			LICENSE.txt
			myfile.txt
	
	Note : ** git add -u only picked LICENSE.md but didnot pick myfile.txt.
	In order to pick both we need to use git add -A
	git add -A will move all the untracked files as well as unstaged files to staging area..
	//git add -A
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			renamed:    LICENSE.md -> LICENSE.txt
			new file:   myfile.txt

	//But these are now in staging area we need to commit that is the second step
	$git commit -m "rename and add"
	[master b19ae52] rename and add
 	2 files changed, 0 insertions(+), 0 deletions(-)
 	rename LICENSE.md => LICENSE.txt (100%)
 	create mode 100644 myfile.txt

	//ls -l
	total 16
	-rw-r--r--  1 soumyasurajita  staff  25 Jun 14 00:20 LICENSE.txt
	-rw-r--r--  1 soumyasurajita  staff  59 Jun 14 01:14 README.md
	-rw-r--r--  1 soumyasurajita  staff   0 Jun 14 10:44 myfile.txt

	//deleting a file with bash command
	//rm myfile.txt
	//git status
	git status
	On branch master
	Changes not staged for commit:
  		(use "git add/rm <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			deleted:    myfile.txt
	no changes added to commit (use "git add" and/or "git commit -a")

	//it is now not yet staged, so to move it to staging area use below command for update
	//git add -u
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			deleted:    myfile.txt
	//lets commit the same
	//git commit -m "remove myfile.txt"
	[master 84c1424] remove myfile.txt
 	1 file changed, 0 insertions(+), 0 deletions(-)
 	delete mode 100644 myfile.txt
	
How to exclude unwanted files in GIT?
	//cd demo
	//touch application.log
	// ls
	LICENSE.txt	README.md	application.log
	//git status
	On branch master
	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			application.log
	nothing added to commit but untracked files present (use "git add" to track)

	//touch .gitignore
	//edit .gitignore and below.
	*.log
	//git status
	On branch master
	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			.gitignore
	nothing added to commit but untracked files present (use "git add" to track)
	

	//Now as we have added .gitignore it will ignore all file modifications that we have added inside .gitingore..
	//So up above it is showing only .gitignore is modified but not showing application.log anymore
	
	//git add .gitignore
	//git commit -m "Adding ignore file"
	[master 3149144] Adding ignore file
 	1 file changed, 1 insertion(+)
 	create mode 100644 .gitignore


How to save work in progress or how to time travel?
	//tagging
	
	
How to get the differences between differnt commit points?
	//git status
	On branch master
	nothing to commit, working tree clean
	//git hist
	* 3149144 (HEAD -> master) Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store

	//git diff 4162d07 HEAD
	diff --git a/.gitignore b/.gitignore
	new file mode 100644
	index 0000000..397b4a7
	--- /dev/null
	+++ b/.gitignore
	@@ -0,0 +1 @@
	+*.log
	diff --git a/LICENSE.md b/LICENSE.txt
	similarity index 100%
	rename from LICENSE.md
	rename to LICENSE.txt

	**HEAD -> points to the latest commit in master
	
	//git difftool 4162d07 HEAD

How to get the difference between something modified in the current directory with the latest commit?
	//Modify README.md 
	# Demo Project
	This is a simple README file
	## Heading 2
	just some updates
	//git diff 
	diff --git a/README.md b/README.md
	index 187585c..aed1bb7 100644
	--- a/README.md
	+++ b/README.md
	@@ -3,3 +3,5 @@
	This is a simple README file
 	## Heading 2
	+
	+just some updates

	** git diff => will compare the current working directory changes with the last commit on git repo i.e. with HEAD
	** git difftool => will compare the same but it will open up the difftool that we have setup
	
	//git help diff
	
What is a branch in git?
	//branch is just a timeline in git
	//we can create and delete branches without affecting timeline
	//all we do is deleting labels or branch names
	//In earlier examples all we have done is moifying the master branch
	//Now we can create a separate branch from master and making the changes & finally merging it to master branch
	//**there are different types of merging available
		1. fast-forwardmerge
			This happens in the simplest of cases
			When no additional work has been detected in the parent branch..in our case maser
			Git will simply apply all commits from the other branch directly onto the nearest branch
				as if we never branched to begin with	
			Of course we can disable the fast forward merges if they are undesired for some reason
			
		2. Automatic
			//Git also automatically resolve any conflicts
			//This happens when git detects non conflicting changes in the parent branch
			//Git is able to automatically resolve any conflicts
			//In doing so the old branch's timeline is preserved,
			and a new merge commit is created to show the merging between two branches
			
		3. Manual merge
			//This happens when git is unable to automatically resolve any conflicts
			//git enters a special conflicting merge state, which means that all merge conflicts must be 
			resolved prior to moving forward with a commit
			//once all commits have been resolved , those changes are saved as a merge commit
			
What is HEAD?
	//HEAD points to last commit of the current branch
	//That means as we switch branches the location of HEAD moves to match the last commit location of that branch.
	//While this is generally true , it is also possible to manually move the HEAD location some place other than the last commit
	
How to create a branch in git from master?
	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	
	//git branch
	* master
	
	//git checkout -b updates
	M	README.md
	Switched to a new branch 'updates'
		** a new branch is created from master called updates
		** Now we are switched to the new branch created i.e. updates
		** If any modification was done in master branch or crrent working directory  
		it carred all the modifications forward into the new branch
	//This is the technique you can use when you start working on master
	//And you decide later that,before commiting , that these changes really should be isolated
		into their feature or topic branch
		
	//git branch
	  master
	* updates
	
	//git status
	On branch updates
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	
	//git add .
	//git commit -m "adding updates from branch"
	[updates 1132905] adding updates from branch
 	1 file changed, 2 insertions(+)
	
	//git status
	On branch updates
	nothing to commit, working tree clean

	//git hist
	* 1132905 (HEAD -> updates) adding updates from branch
	* 3149144 (master) Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store	
			
	** we have the latest commit which is on HEAD and updates branch, but if we go one back we can see master branch.
	** now we can check difference between master and updates branch.
	Instead of using commit id we can use branch names
	
	//git diff updates master
	diff --git a/README.md b/README.md
	index 55f38d4..187585c 100644
	--- a/README.md
	+++ b/README.md
	@@ -3,5 +3,3 @@
	This is a simple README file
 
 	## Heading 2
	-
	-just some updates,on a branch


How to switch from one branch to the other?
	//git checkout master
	Switched to branch 'master'
	
	//git hist
	* 1132905 (updates) adding updates from branch
	* 3149144 (HEAD -> master) Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store

	** Now it shows that HEAD is now on "master"
	since head typically means the last commit on the current branch
	And since the current branch is master , "HEAD" and "master" are sharing the same commit id.
	since our hist command specifies the --all parameter to our log command, 
		we also notice the commit id is associated with the "updates" branch.
		
	Now lets go ahead and merge changesfrom updates to branch
	//git merge updates
	Updating 3149144..1132905
	Fast-forward
 	README.md | 2 ++
 	1 file changed, 2 insertions(+)

	** For this merge, its such a simple merge that its able to do something called fast-forward
	Which means that we are going to pretend that you never really switched away from master in order to make those updates
	So we are going to apply directly those changes to the master branch.
	
	git hist
	* 1132905 (HEAD -> master, updates) adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store
	
	Now we do git hist, we see that "HEAD" , "updates" and "master"
	They all point to the same commit id. That's the effect of fast forward merge
	
	There are options to disable the fast forward merges from happening
	Even though they may be possible , but most of times you want this behaviour
	
	Once we have completed merging in our changes, we are no longer need the updates branch.
	
	** Effective branches in git are just labels of timelines
	And once they are integrated into the main timeline , there's no need for them anymore
	
How to delete a branch?
	//git branch -d updates
	Deleted branch updates (was 1132905).
	
	//git branch
	* master

	//git hist
	* 1132905 (HEAD -> master) adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store


	**Important - Note :- The history didn't go away, just the label, "updates", did.

What is conflicts resolution?
	//cd demo
	//git branch
	* master
	//git checkout -b very-bad
	Switched to a new branch 'very-bad'

	//git branch -a
 	 master
	* very-bad (with asterick and green highlight denoting the current branch)
	
	Let's modify our Readme file; 
	Let's do it in such a way that will cause a conflict,
		which means updating the same part of the file on both branches.
	So, I changed the last line to "This is bound to cause trouble!".
	Let's go ahead and save and close.
	I'm going to use my express commit technique, saying it's a "very bad update".
		//git commit -am "very bad update"
		[very-bad a9d50e5] very bad update
 		1 file changed, 1 insertion(+), 1 deletion(-)
	
		//git hist
		* a9d50e5 (HEAD -> very-bad) very bad update
		* 1132905 (master) adding updates from branch
		* 3149144 Adding ignore file
		* 84c1424 remove myfile.txt
		* b19ae52 rename and add
		* 96aabeb deleting demo file
		* 024ebfa renaming example
		* 04120eb adding example file
		* 4162d07 Updating README
		* 53c4589 all files - license.md,readme.md,ds_store
		
	And, we have "very bad update" at the very top, which is the last commit.
		
		//git checkout master
		Switched to branch 'master'
	Let's return back to master, and before I merge in those changes
	I'm going to pretend to be another developer, 
	or perhaps I'll just forget about those changes that I made on the "very-bad" branch.
	I'll modify our README file exactly in the same location.
	Change that to "I hope this isn't much of a problem", save and close.
	Back at the terminal, again, another express commit: "Causing issues again".

	//git commit -am "Causing issues again"
	[master 0511026] Causing issues again
	 1 file changed, 1 insertion(+), 1 deletion(-)

	Now, let's merge our "very-bad" branch into our master branch.
	//git branch -a
	* master
  	very-bad
	This remind ourselves of our branch names. "git merge very-bad";

	//git merge very-bad
	Auto-merging README.md
	CONFLICT (content): Merge conflict in README.md
	Automatic merge failed; fix conflicts and then commit the result.

	//And, as expected, the auto-merging was unable to resolve the conflict.
	Auto merging's pretty good, but it's not perfect, and it can't read minds,
		so it doesn't know which version of our file we want.
	
	The "README.md" file is the file that's implicated in the merge conflict;
	if we "cat" the file, which just outputs the entire contents of that file,
	The current version has these weird carrots that denote the parts of the file that are conflicted.
	And, you can see that "HEAD" versus "very-bad".
	
	//cat README.md
	# Demo Project
	This is a simple README file
	## Heading 2

	<<<<<<< HEAD
	I hope this isn't much of a problem
	=======
	This is bound to cause trouble!
	>>>>>>> very-bad


	Since this happens to be a very simple case, we could manually modify this file;
	we have a merge tool configured with Git, so let's use it.
	While in a merging state, just type "git mergetool", then press enter.
	And, P4Merge launches with a three-way merge in progress;
	and, we can see that we have the various versions of our file, and the possible solution at the bottom.
	Any number of these possible solutions can be incorporated;
	let's say I like that one. Once I'm done, I need to click the save button
	in order to save those changes that I've made to the README file.
	Now, once I've done that, and I have no further conflicts to resolve,
	I can quit P4Merge: command+q.
	If there are no more files with merge conflicts, then you'll simply return back to the command prompt.
	To complete the merge, we need to commit what we've saved: "git commit -m",
	we can pass in our commit message: "Resolving conflict", then press enter.

	//git commit -m "resolving conflicts"
	[master b8ab50f] resolving conflicts

	If that successfully resolves the conflict, you'll be returned back to a command prompt that looks more normal.
	In this case, we're back to our branch name, simply in parenthesis.
	
	//git status
	On branch master
	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			README.md.orig
			README_BACKUP_17024.md
			README_BASE_17024.md
			README_LOCAL_17024.md
			README_REMOTE_17024.md
	nothing added to commit but untracked files present (use "git add" to track)

	
	If we do a "git status", we can see we have a ".orig" file that is untracked.
	".orig" is the original version of the Readme file.
	Well, I don't like ".orig" files lying around in my Git repository that I might accidentally add back to my repository.
	Let's add this back to our ".gitignore".
	
	Lets modify .gitignore 
	*.log
	*.orig
	README_*
	
	Let's do our express commit: "updating ignore to exclude merge files".
	//git commit -am "updating ignore to exclude merge files"
	[master 81b6484] updating ignore to exclude merge files
	 1 file changed, 2 insertions(+)

	Great, so we still have that ".orig" file;
	I really don't like that guy hanging around, so I'm just going to delete him. Great.



What are git Tags?
	//I am curreently in demo repository 
	//And in master branch with clean slate nothing to commit
	
	//cd demo
	//git branch
	* master
  	very-bad
	//git status
	On branch master
	nothing to commit, working tree clean
	
	//git hist
	* 81b6484 (HEAD -> master) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store

	Note : *** Tags are just labels that we can put at any arbitary commit points
	And by default if you do not specify a commit , it will be the current commit or HEAD.
	These are 2 types
	1. lightweight tags - we can just give a name and git creates it for you.
	
	//git tag mytag
	//git tag --list
	mytag

	//git hist
	* 81b6484 (HEAD -> master, tag: mytag) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store
	


	2. Annotated Tags
	Which means they have extra information associated with the tag.
	So before we do that lets delete mytag 
	
	//git tag -d mytag
	Deleted tag 'mytag' (was 81b6484)

	//git tag -a v1.0 -m "Release 1.0"
	//git tag --list
	v1.0

	//git hist
	* 81b6484 (HEAD -> master, tag: v1.0) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store

	//git show v1.0
	tag v1.0
	Tagger: soumyasurajita <ssurajita111@gmail.com>
	Date:   Sun Jun 14 14:21:32 2020 +0530
	Release 1.0
	commit 81b6484b5cce53be6c4c5c154107391d959184d1 (HEAD -> master, tag: v1.0)
	Author: soumyasurajita <ssurajita111@gmail.com>
	Date:   Sun Jun 14 14:08:22 2020 +0530
	updating ignore to exclude merge files
	diff --git a/.gitignore b/.gitignore
	index 397b4a7..49baadb 100644
	--- a/.gitignore
	+++ b/.gitignore
	@@ -1 +1,3 @@
	*.log
	+*.orig
	+README_*
	\ No newline at end of file


	** It is truly useful when using major milestones
	And you might want to associate some information with it
	
What is stashing?
	//I am currently on demo git repository on master branch.
	//Lets modify the README.md file. Adding "Just something going on" last lien
	
	# Demo Project
	This is a simple README file
	## Heading 2	
	Just something going on

	 //git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	
	But what if we decide that we are really not supposed to be doing that right now...
	What if we decide that we really should have started this on a branch,
	or maybe we need to change content and work on something else for a while?
	Well, we can do that by using Git's stashing ability.
	Alright, so let's do that;
	
	//git stash
	
	//and it tells me that the HEAD was saved,
	which is the last commit on the current branch, which is master.
	If we do a "git stash list", it shows us our stashes.

	//git stash list
	stash@{0}: WIP on master: 81b6484 updating ignore to exclude merge files

	We have a "WIP on master", and it shows us the last commit,and the associated commit message.
	
	After the "stash", we're actually back on a clean working directory.
	//git status
	On branch master
	nothing to commit, working tree clean

	Let's apply our "emergency fix" if you will; save and close.
	Lets modify suppose LICENSE.txt
	# LICENSE
	## Apache 3.0
	
	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   LICENSE.txt
	no changes added to commit (use "git add" and/or "git commit -a")
	
	//git commit -am "updating license file"
	[master 033437b] updating license file
 	1 file changed, 1 insertion(+), 1 deletion(-)
	
	
	Now, let's apply our stash; do a "git stash pop".
	So, that will do two actions at once; one is an "apply", and then the next is a "drop".
	The "stash apply" will apply whatever the stash is: the last stash.
	In this case, we put those changes back in the Readme file,
	Then, after that, it dropped that stash that was applied.
	
	//git status
	On branch master
	nothing to commit, working tree clean
	
	//git stash pop
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	Dropped refs/stash@{0} (e41f5a9ef7dbfc40da33aae675f722aa7ee44277
	
	
	//git stash list
	(nothing will be displayed)
	
	//git commit -am "updating readme again"
	[master c648e7f] updating readme again
 	1 file changed, 1 insertion(+), 1 deletion(-)
	
	//git status
	On branch master
	nothing to commit, working tree clean

What is reset and reflog?
	//Now suppose we modify again README.md file - added one extra line "Update in stage"
	# Demo Project
	This is a simple README file
	## Heading 2
	Just something going on
	Update in stage
	
	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")

	//git add .
	
	//git status
	On branch master
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			modified:   README.md


	** three types of reset
	** 1. soft -least destructive of all of them, all it does is change where HEAD is pointing
	   2. default -mixed, hard
	
	Now lets suppose we got to know that what we have added is not correct or we missed one line.
	Lets modify the README file again.. Adding one more extra line - More updates in working directory
	
	# Demo Project
	This is a simple README file
	## Heading 2
	Just something going on
	Update in stage
	More updates in working directory

	If we do a "git status", we see we have our modifications detected, in both the staging area, and just in our working directory.
	Now, there may be times when you need to go to a different commit point;
	if you made a mistake in the last commit, for example, that you didn't need to have committed.
	You want to roll back to a previous commit; that's certainly fine.

	//git status
	On branch master
	Changes to be committed:
  	(use "git reset HEAD <file>..." to unstage)
	modified:   README.md
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
			
	
	//git hist
	* c648e7f (HEAD -> master) updating readme again
	* 033437b updating license file
	* 81b6484 (tag: v1.0) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store
	
	//Make a note of where HEAD is pointing to right now, which is "67b1242".
	//The soft reset is the least destructive of them all
	//Basically, all it does is change where HEAD is pointing.
	//So, let's try that out; usually no news is good news.
	
	//git reset 81b6484 --soft

	//If we do a "git hist', as expected, HEAD is now pointing to "81b6484",
	//which is the commit id that we passed in to the reset command.

	//git hist
	* 81b6484 (HEAD -> master, tag: v1.0) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store
	
	Let's check out our "git status"; we have files that have been modified,
	and in our staging area. That's what soft allows us to do,is simply change the commit id that head is pointing to,
	which means it preserves the Git staging area, and our working directory.
	Effectively, we can back out our changes, make minor modifications to them,
	and then commit where head is currently pointing.
	
	Let's try this another time; I'm going to choose the commit id "3149144".
	
	//git reset 3149144 --mixed
	Unstaged changes after reset:
	M	.gitignore
	M	LICENSE.txt
	M	README.md

	//git hist
	* 81b6484 (tag: v1.0) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 (HEAD -> master) Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 Updating README
	* 53c4589 all files - license.md,readme.md,ds_store

	If we do a "git hist", we can see that HEAD is now pointing to "3149144".
	If we do a "git status", we have several files that have been unstaged,
	and placed into our working directory; there's nothing in our staging area.
	
	//git status
	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   .gitignore
			modified:   LICENSE.txt
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")
	
	
	Let's try this one last time. Now type "git reset", followed by the commit id:
	I'm using "4162d07 --hard". This is the most destructive of all the reset modes.
	
	//git reset 4162d07 --hard
	HEAD is now at 4162d07 Updating README

	//git status
	On branch master
	nothing to commit, working tree clean
	
	** --hard will wipe out all the changes and returns a clean directory
	most destructive of all
	
	
	//git hist
	* 81b6484 (tag: v1.0) updating ignore to exclude merge files
	*   b8ab50f resolving conflicts
	|\  
	| * a9d50e5 (very-bad) very bad update
	* | 0511026 Causing issues again
	|/  
	* 1132905 adding updates from branch
	* 3149144 Adding ignore file
	* 84c1424 remove myfile.txt
	* b19ae52 rename and add
	* 96aabeb deleting demo file
	* 024ebfa renaming example
	* 04120eb adding example file
	* 4162d07 (HEAD -> master) Updating README
	* 53c4589 all files - license.md,readme.md,ds_store
	
	//git log --oneline
	4162d07 (HEAD -> master) Updating README
	53c4589 all files - license.md,readme.md,ds_store
	
	
What is git reflog? How it is different from git log?
	//git log shows different commit ids
	//git reflog shows different commit ids along with different actions taken
	git reflog
	4162d07 (HEAD -> master) HEAD@{0}: reset: moving to 4162d07
	53c4589 HEAD@{1}: reset: moving to 53c4589
	4162d07 (HEAD -> master) HEAD@{2}: reset: moving to 4162d07
	4162d07 (HEAD -> master) HEAD@{3}: reset: moving to 4162d07
	3149144 HEAD@{4}: reset: moving to 3149144
	81b6484 (tag: v1.0) HEAD@{5}: reset: moving to 81b6484
	c648e7f HEAD@{6}: commit: updating readme again
	033437b HEAD@{7}: commit: updating license file
	81b6484 (tag: v1.0) HEAD@{8}: reset: moving to HEAD
	81b6484 (tag: v1.0) HEAD@{9}: commit: updating ignore to exclude merge files
	b8ab50f HEAD@{10}: commit (merge): resolving conflicts
	0511026 HEAD@{11}: commit: Causing issues again
	1132905 HEAD@{12}: checkout: moving from very-bad to master
	a9d50e5 (very-bad) HEAD@{13}: commit: very bad update
	1132905 HEAD@{14}: checkout: moving from master to very-bad
	1132905 HEAD@{15}: merge updates: Fast-forward
	3149144 HEAD@{16}: checkout: moving from updates to master
	1132905 HEAD@{17}: commit: adding updates from branch
	3149144 HEAD@{18}: checkout: moving from master to updates
	3149144 HEAD@{19}: commit: Adding ignore file
	84c1424 HEAD@{20}: commit: remove myfile.txt
	b19ae52 HEAD@{21}: commit: rename and add
	96aabeb HEAD@{22}: commit: deleting demo file
	
	
	//git log
	commit 4162d07ad474eebe2b6b4bd0355f9b14895e2b36 (HEAD -> master)
	Author: soumyasurajita <ssurajita111@gmail.com>
	Date:   Sun Jun 14 00:59:03 2020 +0530

    	Updating README

	commit 53c4589d5bdd4fde08db657b6a724a55d0b54ae9
	Author: soumyasurajita <ssurajita111@gmail.com>
	Date:   Sun Jun 14 00:26:17 2020 +0530

    	all files - license.md,readme.md,ds_store
	
What is GitHub?
	//So far we were working on git local.
	//it's time to publish our code somewhere others can see it, and potentially contribute to it.
	//The most popular hosting service for Git repositories is GitHub.
	//GitHub has become the most popular Git hosting service largely because of the free account it offers,
		which includes public repositories, along with its long list of powerful features.
	//GitHub does have a paid service for those that need private repositories too.
	
Signup for github?
	//if you dont have an account then go ahead and create one..
	//https://github.com/
	//remember the username
	//mine is ssurajita
	
	//github profile
	//upload a picture
	//url - any website we have
	//name
	//email
	//company
	//location
	
	//account settings
	//change password
	//change username
	//delete account
	
	//Email - we can add additional email address as well
	//Delete email or resend verofication options are there
	
	//Notification - we can show hide different notifications to email
	
	//Billing - for free account it is not required as of now.
	
	//Security - we can enable two factor authentication
	
	
How to create a new repository?
	//login to github
	//click on new repositor
	//public repo 
	//once repository will be created it will redirect to a page with the command to use for repo
	
How to link our local repository to our github repository?
	
	//git remote -v
	//git remote add origin https://github.com/ssurajita/demo.git

	The "add" sub command takes two parameters:
	The name of the remote reference we want to create,in this case, I want to name this reference "origin";
	And then, the second parameter is the full URL to the remote repository,which is the URL to my GitHub repository.
	
	//git remote add origin https://github.com/ssurajita/demo.git

	Now, in this case, we could use any name we want to in place of "origin",
	but by convention, the first and primary remote repository is named origin.
	Again, that's simply a convention. Double check the line, and then press enter.
	
	
	//git remote -v
	origin	https://github.com/ssurajita/demo.git (fetch)
	origin	https://github.com/ssurajita/demo.git (push)
	
	//pushing chnages to github
	//git push -u origin master --tags
	//Username for 'https://github.com': ssurajita
	//Password for 'https://ssurajita@github.com': *********

	Enumerating objects: 37, done.
	Counting objects: 100% (37/37), done.
	Delta compression using up to 4 threads
	Compressing objects: 100% (32/32), done.
	Writing objects: 100% (37/37), 3.36 KiB | 430.00 KiB/s, done.
	Total 37 (delta 15), reused 0 (delta 0)
	remote: Resolving deltas: 100% (15/15), done.
	To https://github.com/ssurajita/demo.git
	 * [new branch]      master -> master
	 * [new tag]         v1.0 -> v1.0
	Branch 'master' set up to track remote branch 'master' from 'origin'.
	
	After pushing to remote repo we can check all commits, branches, tags info on github.
	
Differences between SSH authentication and https ?
	//Currently, the origin repository is set up to use the HTTPs.
	So when we try to do a push, "git push origin master",GitHub will prompt me for my username and password.
	//For private repositories, it may prompt you each time you need to do any network-based communication, 
	including pulling or fetching or anything else that requires going back to the remote.
	
	//For public repositories, it may only prompt you when you need to push changes up.
	Also, if you've been following along, and you weren't prompted for your username and password,
	it means you are on an operating system like the Mac that has a password manager like Keychain, 
	and that Keychain is configured to keep track of your username and passwords from the terminal program.
	This is the way I have things configured now, and so I actually had to delete my prior configuration 
		in order to force this to happen again.
	
	//If you're on Windows, you may be prompted again and again for your username and password 
		each time you need to communicate back to GitHub.
	This can get annoying after a while, and thus we have SSH,
	which is just as secure as HTTPs, and it's a little bit more convenient,
	since we establish a public and a private key that this machine knows about
	and is registered with GitHub as well. We're going to set that up in the next few videos.
	
How to setup ssh key ?
	//cd ~
	//ls .ssh
	ls: .ssh: No such file or directory
	//mkdir .ssh
	//cd .ssh
	//pwd
	/Users/soumyasurajita/.ssh
	***//sh-keygen -t rsa -C "ssurajita111@gmail.com"
	Generating public/private rsa key pair.
	Enter file in which to save the key (/Users/soumyasurajita/.ssh/id_rsa): 
	Enter passphrase (empty for no passphrase): *********
	Enter same passphrase again: *********

	Your identification has been saved in /Users/soumyasurajita/.ssh/id_rsa.
	Your public key has been saved in /Users/soumyasurajita/.ssh/id_rsa.pub.
	The key fingerprint is:
	SHA256:nIL4vU3nRa7dvcM/+r7kketf4n8C7HQJ6fNlpw1CH+8 ssurajita111@gmail.com
	The key's randomart image is:
	+---[RSA 2048]----+
	|                 |
	|                 |
	|             .   |
	|   . . . .  + .  |
	|  . . . S  +.o + |
	|   . . .   oB = *|
	|    . . . .oo*o@o|
	|       + o +.o**E|
	|      . . o ..B@&|
	+----[SHA256]-----+

	
	//ls -al
	total 16
	drwxr-xr-x   4 soumyasurajita  staff   128 Jun 14 17:06 .
	drwxr-xr-x+ 77 soumyasurajita  staff  2464 Jun 14 17:04 ..
	-rw-------   1 soumyasurajita  staff  1876 Jun 14 17:06 id_rsa
	-rw-r--r--   1 soumyasurajita  staff   404 Jun 14 17:06 id_rsa.pub


	Now go to .ssh and open id_rsa.pub file
	Copy the whole content of it..
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDH6AlVoFYuw8rFK65YyGoAyAdghqzhKnI42QVn6cmsZHc9RGWoEhO9o+mY08J+YXaRitDvdrMS4KgB+YOUQTzKk0b1t6AurgzMxeydLASejGALvmIw2FRqHfBesYYcvyKNdy9/4WLHwSm7PX9nOQyAZd/PVz9D/G/YTe++WCKcf+kO/OcDLQy0FqguwJ2r9ok2y2SWF9/geWp/h+kBeKMWc8N8wRi9D8qirYbcub/ZImKqBr6c8yXvxzi7IGn5jFTRibRmmPF5dRJXauJeXN2WOE0q+iSKwJgq3j+bRC2LOAnHiA+dhb5bgi3xAbtfC+J8op+njOawgByF9y92Z2tP ssurajita111@gmail.com

	Then go back to the github page. click on ssh option.
	Click on new ssh key
	Title - Soumya Macbook Air (we can give any title)
	Key - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDH6AlVoFYuw8rFK65YyGoAyAdghqzhKnI42QVn6cmsZHc9RGWoEhO9o+mY08J+YXaRitDvdrMS4KgB+YOUQTzKk0b1t6AurgzMxeydLASejGALvmIw2FRqHfBesYYcvyKNdy9/4WLHwSm7PX9nOQyAZd/PVz9D/G/YTe++WCKcf+kO/OcDLQy0FqguwJ2r9ok2y2SWF9/geWp/h+kBeKMWc8N8wRi9D8qirYbcub/ZImKqBr6c8yXvxzi7IGn5jFTRibRmmPF5dRJXauJeXN2WOE0q+iSKwJgq3j+bRC2LOAnHiA+dhb5bgi3xAbtfC+J8op+njOawgByF9y92Z2tP ssurajita111@gmail.com
	//Add SSH key
	
	Also we can delete ssh key if we wish to and we can add another..
	
	However, let's check it out; let's see if this worked.
	So, let's go back to our terminal, and to confirm that this machine that I'm currently on is able to communicate 
	with GitHub via SSH, we're going to use the "ssh" command to try to log in.

	cd ~
	cd .ssh
	ssh -T git@github.com
	The authenticity of host 'github.com (13.234.176.102)' can't be established.
	RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
	Are you sure you want to continue connecting (yes/no)? yes
	Warning: Permanently added 'github.com,13.234.176.102' (RSA) to the list of known hosts.
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': *********
	Hi ssurajita! You've successfully authenticated, but GitHub does not provide shell access.

	Type "ssh -T git@github.com". Once you've done that press enter.
	If you've never connected to GitHub before via SSH, you would be prompted onfirming whether or not you really want to connect. Type "yes".
	You'll be prompted for your SSH key passphrase.
	Sometimes it may be referred to as a password, but they're the same thing.
	Since I'm on the Mac, I have the option of remembering this passphrase or password in my keychain, 
	and I'm going to do so, since I don't like being prompted each time. 
	Click OK, or press enter.
	Once you've done that, SSH will attempt to connect, and then it will exit out to the terminal.
	The last line is what's important; it should greet you by your username,
	and then tell you that you have successfully authenticated, which is the important part.
	But, GitHub does not provide shell access, which it explains.
	That's ok, because don't need shell access; we just need to use the SSH authentication process to log in, 
		and we have just confirmed that.
	

How to create a remote repo and then clone it to local?
	//lets create a new repositry called my-website
	//check (tick) Initialize this repository with a README
	//Add .gitignore: Node
	//Add a license: Apache license 2.0
	
	//you'll notice this time, is instead of landing on a page with instructions on how to link 
		your repository to GitHub, GitHub goes directly to the repository's main page.
	//And, that's because we initialized our repository with a handful of files, 
	which means that GitHub was able to create an initial branch called master
	in order to add the initial commit, which has our initial set of files.

	//Now click on clone or download. 
	//click on Use SSH and copy the URL
	git@github.com:ssurajita/my-website.git
	
	Now lets go back to our terminal
	
	pwd
	/Users/soumyasurajita/Desktop/git/projects/demo
	cd ..
	git clone git@github.com:ssurajita/my-website.git
	Cloning into 'my-website'...
	Warning: Permanently added the RSA host key for IP address '13.234.210.38' to the list of known hosts.
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	remote: Enumerating objects: 5, done.
	remote: Counting objects: 100% (5/5), done.
	remote: Compressing objects: 100% (4/4), done.
	remote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
	Receiving objects: 100% (5/5), 5.29 KiB | 774.00 KiB/s, done.

	//pwd
	/Users/soumyasurajita/Desktop/git/projects
	//ls
	demo		my-website

	//cd my-website
	// ls -al
	total 40
	drwxr-xr-x   6 soumyasurajita  staff    192 Jun 14 17:41 .
	drwxr-xr-x   4 soumyasurajita  staff    128 Jun 14 17:40 ..
	drwxr-xr-x  12 soumyasurajita  staff    384 Jun 14 17:41 .git
	-rw-r--r--   1 soumyasurajita  staff   1610 Jun 14 17:41 .gitignore
	-rw-r--r--   1 soumyasurajita  staff  11357 Jun 14 17:41 LICENSE
	-rw-r--r--   1 soumyasurajita  staff     12 Jun 14 17:41 README.md

	//cd ..
	//ls -l
	total 0
	drwxr-xr-x  8 soumyasurajita  staff  256 Jun 14 16:38 demo
	drwxr-xr-x  6 soumyasurajita  staff  192 Jun 14 17:41 my-website
	
	//rm -rf my-website
	//ls -l
	total 0
	drwxr-xr-x  8 soumyasurajita  staff  256 Jun 14 16:38 demo
	
	//git clone git@github.com:ssurajita/my-website.git website
	Cloning into 'website'...
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	remote: Enumerating objects: 5, done.
	remote: Counting objects: 100% (5/5), done.
	remote: Compressing objects: 100% (4/4), done.
	remote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
	Receiving objects: 100% (5/5), 5.29 KiB | 5.29 MiB/s, done.

	// ls -l
	total 0
	drwxr-xr-x  8 soumyasurajita  staff  256 Jun 14 16:38 demo
	drwxr-xr-x  6 soumyasurajita  staff  192 Jun 14 18:12 website

	//cd website
	//ls -l
	total 32
	-rw-r--r--  1 soumyasurajita  staff  11357 Jun 14 18:12 LICENSE
	-rw-r--r--  1 soumyasurajita  staff     12 Jun 14 18:12 README.md

	Since I have a repository named website,
	I figured I would add a bunch of files that are website related.
	To do that, I'm going to go over to my browser, and go to "initializr.com";
	This website provides a quick and easy way to jump-start a website;
	it has several possible ways of getting started. I'm going to choose "Bootstrap".
	
	http://www.initializr.com/
	Click on bootstrap
	Click on Download it
	Now once it is downloaded go to the Downloads folder and unzip it.
	
	So, underneath my "Downloads" folder, we have our "initializr" folder,
	with all the various contents of that folder.
	I'm going to bring all those contents into my website repository.
	To copy over all the files, the command syntax is "cp -R" for recursive;

	//cp -R ~/Downloads/initializr/* .
	//ls -l
	total 88
	-rw-r--r--  1 soumyasurajita  staff  11357 Jun 14 18:12 LICENSE
	-rw-r--r--  1 soumyasurajita  staff     12 Jun 14 18:12 README.md
	-rwxr-xr-x@ 1 soumyasurajita  staff   3959 Jun 14 18:49 apple-touch-icon.png
	-rwxr-xr-x@ 1 soumyasurajita  staff    416 Jun 14 18:49 browserconfig.xml
	drwxr-xr-x@ 9 soumyasurajita  staff    288 Jun 14 18:49 css
	-rwxr-xr-x@ 1 soumyasurajita  staff    766 Jun 14 18:49 favicon.ico
	drwxr-xr-x@ 6 soumyasurajita  staff    192 Jun 14 18:49 fonts
	drwxr-xr-x@ 2 soumyasurajita  staff     64 Jun 14 18:49 img
	-rwxr-xr-x@ 1 soumyasurajita  staff   5283 Jun 14 18:49 index.html
	drwxr-xr-x@ 4 soumyasurajita  staff    128 Jun 14 18:49 js
	-rwxr-xr-x@ 1 soumyasurajita  staff   1854 Jun 14 18:49 tile-wide.png
	-rwxr-xr-x@ 1 soumyasurajita  staff   3482 Jun 14 18:49 tile.png
	
	
	//git status
	On branch master
	Your branch is up to date with 'origin/master'.
	Untracked files:
  		(use "git add <file>..." to include in what will be committed)
			apple-touch-icon.png
			browserconfig.xml
			css/
			favicon.ico
			fonts/
			index.html
			js/
			tile-wide.png
			tile.png
	nothing added to commit but untracked files present (use "git add" to track)
	
	That first path is the source location, and then the dot is the destination,
	which represents the current folder. Once you've done that, verify and then press enter.
	If we do a "git status", you can see that Git notices all these files as untracked.
	To add them to the index, and to allow Git to start tracking these files,
	let's use the "git add" command.

	//git add .
	//git status
	On branch master
	Your branch is up to date with 'origin/master'.
	Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
			new file:   apple-touch-icon.png
			new file:   browserconfig.xml
			new file:   css/bootstrap-theme.css
			new file:   css/bootstrap-theme.css.map
			new file:   css/bootstrap-theme.min.css
			new file:   css/bootstrap.css
			new file:   css/bootstrap.css.map
			new file:   css/bootstrap.min.css
			new file:   css/main.css
			new file:   favicon.ico
			new file:   fonts/glyphicons-halflings-regular.eot
			new file:   fonts/glyphicons-halflings-regular.svg
			new file:   fonts/glyphicons-halflings-regular.ttf
			new file:   fonts/glyphicons-halflings-regular.woff
			new file:   index.html
			new file:   js/main.js
			new file:   js/vendor/bootstrap.js
			new file:   js/vendor/bootstrap.min.js
			new file:   js/vendor/jquery-1.11.2.min.js
			new file:   js/vendor/modernizr-2.8.3-respond-1.4.2.min.js
			new file:   js/vendor/npm.js
			new file:   tile-wide.png
			new file:   tile.png

	//git commit -m "Adding initial website files"
	[master 6025993] Adding initial website files
 	23 files changed, 9539 insertions(+)
	create mode 100755 apple-touch-icon.png
 	create mode 100755 browserconfig.xml
 	create mode 100755 css/bootstrap-theme.css
 	create mode 100755 css/bootstrap-theme.css.map
 	create mode 100755 css/bootstrap-theme.min.css
 	create mode 100755 css/bootstrap.css
 	create mode 100755 css/bootstrap.css.map
 	create mode 100755 css/bootstrap.min.css
 	create mode 100755 css/main.css
 	create mode 100755 favicon.ico
 	create mode 100755 fonts/glyphicons-halflings-regular.eot
 	create mode 100755 fonts/glyphicons-halflings-regular.svg
 	create mode 100755 fonts/glyphicons-halflings-regular.ttf
 	create mode 100755 fonts/glyphicons-halflings-regular.woff
 	create mode 100755 index.html
 	create mode 100755 js/main.js
 	create mode 100755 js/vendor/bootstrap.js
 	create mode 100755 js/vendor/bootstrap.min.js
 	create mode 100755 js/vendor/jquery-1.11.2.min.js
 	create mode 100755 js/vendor/modernizr-2.8.3-respond-1.4.2.min.js
 	create mode 100755 js/vendor/npm.js
 	create mode 100755 tile-wide.png
	create mode 100755 tile.png

	//git push origin master
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': *********
	Enumerating objects: 30, done.
	Counting objects: 100% (30/30), done.
	Delta compression using up to 4 threads
	Compressing objects: 100% (28/28), done.
	Writing objects: 100% (29/29), 273.94 KiB | 2.36 MiB/s, done.
	Total 29 (delta 3), reused 0 (delta 0)
	remote: Resolving deltas: 100% (3/3), done.
	To github.com:ssurajita/my-website.git
   	cca01ae..6025993  master -> master

	Now if i go to my repository in github my-website i should see all these files i pushed is available in my github 
	
	***git push <remote> <local>

	git config --global push.default simple

What is fetch and pull?
	//lets edit index.html in Github my-website repo
	<title>My Website</title>
	Commit Changes : Providing title on index.html
	Leave the description blank and then click on commit changes
	
	Now we have our changes available on remote repo. But our local master repo for this is still unaware of changes
	//git status
	On branch master
	Your branch is up to date with 'origin/master'.
	nothing to commit, working tree clean

	Lets go ahead and modify our file - README.md on local repo - adding "This is really awesome website"
	# my-website
	This is really awesome website

	//git status
	On branch master
	Your branch is up to date with 'origin/master'.
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   README.md
	no changes added to commit (use "git add" and/or "git commit -a")

	//git commit -am "Updating README"
	[master bf688cf] Updating README
 	1 file changed, 3 insertions(+), 1 deletion(-)

	//git status
	On branch master
	Your branch is ahead of 'origin/master' by 1 commit.
  		(use "git push" to publish your local commits)
	nothing to commit, working tree clean

	Git tells me that I'm "ahead of 'origin/master' by 1 commit.";
	however, we know that we made a commit on GitHub directly.
	Let's try pushing up our change: "git push". When we try to push this time,
	GitHub rejected our attempt to push up; it's telling us to "fetch" first.

	git push
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	To github.com:ssurajita/my-website.git
 	! [rejected]        master -> master (fetch first)
	error: failed to push some refs to 'git@github.com:ssurajita/my-website.git'
	hint: Updates were rejected because the remote contains work that you do
	hint: not have locally. This is usually caused by another repository pushing
	hint: to the same ref. You may want to first integrate the remote changes
	hint: (e.g., 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.

	One thing to keep in mind, is although we've been using the term "pull",
	a "pull" is really two commands in one; it is a "fetch" and it is also a "merge".

	Git will first fetch all the updates from the remote repository,
	and then it will merge those changes into our current repository.
	Obviously, there's opportunity for this to fail in the form of a merge conflict,
	but often times those merges go in automatically, or as a fast-forward.
	Well, let's say that we're not sure; so we could either do a fetch or a pull in this scenario.
	If we did the pull, we would automatically integrate any changes that are out on GitHub;
	however, that can be a destructive command
	if you have changes that are not compatible with what's currently on GitHub.
	So, one way to alleviate that is just to do a "fetch"; fetches are non-destructive.
	"git fetch"; Git will now go out to our remote repository
	and update all of its local information based on what's changed out on GitHub.

	//git fetch
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	remote: Enumerating objects: 5, done.
	remote: Counting objects: 100% (5/5), done.
	remote: Compressing objects: 100% (3/3), done.
	remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
	Unpacking objects: 100% (3/3), done.
	From github.com:ssurajita/my-website
   	6025993..c670968  master     -> origin/master


	//git status
	On branch master
	Your branch and 'origin/master' have diverged,
	and have 1 and 1 different commits each, respectively.
  		(use "git pull" to merge the remote branch into yours)
			nothing to commit, working tree clean


	it recommends that we use "git pull" to automatically merge our remote branch.
	Technically, we could do this with the "git merge" command as well,
	but just like the advice given, I often find that just doing a "git pull" is a lot simpler.

	//git pull
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	Merge made by the 'recursive' strategy.
 	index.html | 2 +-
 	1 file changed, 1 insertion(+), 1 deletion(-)
	
	we just merged down everything from GitHub.
	GitHub is still unaware of our changes, so we need to push up what we have.
	Type "git push". Great, now that we have pulled down all our changes there are no conflicts 
		between GitHub and our local repo.

	//git push
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	Enumerating objects: 9, done.
	Counting objects: 100% (8/8), done.
	Delta compression using up to 4 threads
	Compressing objects: 100% (4/4), done.
	Writing objects: 100% (5/5), 584 bytes | 292.00 KiB/s, done.
	Total 5 (delta 2), reused 0 (delta 0)
	remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
	To github.com:ssurajita/my-website.git
   	c670968..7d25ff3  master -> master

	** Doing a pull, or a fetch, prior to any pushes is a best practice, 
	and a necessity if you are sharing your repository with others.

	** for all remote github repo we can see the branches selected, commits, releases, contributors
	** Bydefault github repo always searches for README.md and shows it as default file.
	** change repository name in github
	
	
Updating repository and remote references?
	//git remote -v
	origin	git@github.com:ssurajita/my-website.git (fetch)
	origin	git@github.com:ssurajita/my-website.git (push)
	
	//git remote set-url origin git@github.com:ssurajita/website.git
	//git remote -v
	origin	git@github.com:ssurajita/website.git (fetch)
	origin	git@github.com:ssurajita/website.git (push)
	
	//git remote show origin
	Enter passphrase for key '/Users/soumyasurajita/.ssh/id_rsa': 
	* remote origin
  	Fetch URL: git@github.com:ssurajita/website.git
  	Push  URL: git@github.com:ssurajita/website.git
  	HEAD branch: master
  	Remote branch:
    		master tracked
  	Local branch configured for 'git pull':
    		master merges with remote master
  	Local ref configured for 'git push':
    		master pushes to master (up to date)

	
Viewing and editing files on github?
	//we can edit any file directly on github using edit icon
	//creating new file on github => Create newfile
	I'm going to name this file "lipsum.txt". I'm going to go to "lipsum.com",
	then copy a paragraph of lorem ipsum; copy, and then paste.
	Before we save the file, we can preview it; let's give it some reasonable breaks.
	There we go; that looks decent. Like before, once we are done
	let's scroll all the way down to the bottom of the page, and put in our commit message:
	"Create new file -- filler text". 
	This time I'm going to decide to create a new branch,
	since creating stuff really should be on a feature branch.
	I'm going to name my branch "feature-lipsum",
	then I'm going to click on "Propose new file". 
	
	Going this way around, we are effectively creating a pull request back into our master branch.
	In addition to the commit message we had before, we also have a pull request commit message 
		and a comment to go along with it.
	So here I'm writing in Markdown syntax. I can preview it;
	you can see I have a heading and then two bullets.
	Once I'm happy with this commit message and the corresponding comment,
	I'm going to click on create pull request.
	Since I'm the only contributor to this repository, I'm going to accept my own pull request.
	So, I'm going to click on the green "Merge pull request".
	I will have an opportunity to modify this message prior to going in,
	I'm going to just leave it as is, and click on confirm merge.
	Once I've done that, I have the opportunity to delete the branch, so I will do so.
	Now that we've done that, let's click on "website".
	Great, now we have our "lipsum.txt" file.
	If we click on it, you can see that we have our five lines of lorem Ipsum.
	
	
	//We can also directly create a file on master branch
	//renaming and deleting files on github
	
	
	
