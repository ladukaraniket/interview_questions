
====::===================================== REACT INTERVIEW QUESTIONS ====::===================================== 

Q. What is react?
Q. What is SPA?
Q. Is React is SPA?
Q. What is difference between React and Angular?
Q. What are the features of React?
Q. What is advantages of React?
Q. What are the limitations of react?
Q. What do you understand by react server side rendering?
Q. What is current version of react?
Q. What is the difference between Element and Component?
Q. What is React.createElement()?
Q. Can we write react component without jsx?
Q. When to use a Class Component over a Function Component?

Q. What are the minimum libraries we need for a basic react application?
Q. What is MEAN and MERN?
Q. What is the difference between a framework and a library?
Q. My react is a framework or a library?//library
Q. My angular/angularjs is a framework or a library?//framework

Q. What is current version of React?
Q. What is Virtual DOM?
Q. What is the difference between Virtual DOM and Actual DOM?
Q. What is diffing algorithm and reconciliation?
Q. What is JSX?
Q. Why can’t browser read JSX?
Q. How different is React ES6 standard from when compared to ES5?
Q. What do you understand from “In React, everything is a component.”
Q. Explain the purpose of render() in React.
Q. What do you understand by expression in react? When exactly we will use {}?
Q. Why we use {{}} for style attribute?

Q. While importing what is the difference between below 2 syntax?
	import React from "react"; //default exported from file
	import {Component} from "react"; //normal exported from file
	
Q. What is the error we will get if we don’t import react-dom?
	//ReferenceError: Can't find variable: ReactDOM
Q. What error we will get if you load ReactDOM before React? 
	//Error: ReactDOM was loaded before React. 
	Make sure you load the React package before loading ReactDOM.
Q. What if we have not imported react ?
	//Error: ReactDOM was loaded before React. 
	Make sure you load the React package before loading ReactDOM.
	//ReferenceError: Can't find variable: ReactDOM
Q. If we don’t mention script type=“text/babel” then what will happen?
	//SyntaxError: Unexpected token ‘<'
Q.  ReactDOM.render() method takes how many arguments?
	//3 - component, container, callback
Q. Can you tell me my component class render() method is triggered how many times?
	//On initial load first my constructor is going to trigger, then my render() method is going to trigger
	//state change also
	//on receiving new props as well

Q. How many types of components are available?
Q. Do we need to import react for functional components as well?
Q. if we do not override the React.Component render() method we will get which error?	
	//Warning: App(...): No `render` method found on the returned component instance: 
	you may have forgotten to define `render`.

Q. if we extends a class from React.Component class and also overridden render() method 
	   	But we are not having a return statement. Then what will be the error?
	//Error: App(...): Nothing was returned from render. 

Q. where my execution is going to start in react app?
	//My execution is always going to start from ReactDOM.render() method only

Q. What all things we get from React.Component class?
	//this.state, this.props, this.refs, this.setState(), render(), constructor() & life cycle methods
Q. Whatever a component receives from outside world or its parent can be received as?
	//this.props
Q. How many ways we can create variables within a class component?
	//let, const, this.varname , also state variable and props
Q. What is the difference between let, const, this.varname , this.state, this.props and this.refs?
Q. How a functional component receives values from parent component? as this.props not available for functional components..
	this.props is not available?
	//using argument
Q. How we can create a state variable for a class component?
	//this.state = {}
Q. How we can update a state variable in a class component?
	this.setState({})
Q. What is the syntax of setState()? How many ways it can be used?
	//this.setState({},()=>{})
	//this.setState({})
	//this.setState(()=>{})
Q. If we change the variable n value like below then what is the problem?
	//this.state.n =10;
	//state will be changed but render() method will not be called. 
	//And state variable updated value will never get printed.
	//So we need to call setState() which internally calles setState()
	
Q. What is React.forceUpdate()? When we should go for it?

Q. What all life cycle methods are called when setState() is called?
Q. What is a PureComponent?
	//shouldComponentUpdate() returns false..
	//so on a state change if both previous and current state values are same it will not trigger any lifecycle method that was supposed to be triggered after shouldComponentUpdate()
	
Q. What is the difference between a class component and a pure component?

Q. What is use of constructor() in class? When we will go for it?
	//initialise state
	//bind class methods with this
	//this.myref = React.createRef() reference etc..
	
Q. Why we need to call super() inside constructor?
Q. When we need to call constructor(props){super(props); }?
Q. Is constructor() is mandatory for a class component?//no

Q. Why we need to bind class methods within constructor?

Q. How many ways we can bind method to this within a class?
	//inside constructor
		constructor(){
			super();
			this.fnSubmit = this.fnSubmit.bind(this);
		}
		fnSubmit(){}
		
	//inline binding
		<input type="button" onClick={this.fnSubmit.bind(this)} />
		fnSubmit(){}
	//using inline arrow function
		<input type="button" onClick={(event)=>{ return this.fnSubmit() }} />
	//defining class methods as arrow functions...
		<input type="button" onClick={this.fnSubmit} />
		fnSubmit = () => {}
		
Q. What are synthetic events in React?
Q. What are "key" props and what is the benefit of using them in arrays of elements?
Q. What are mandatory methods for a class component?
	//only render() method is mandatory to override

Q. How many ways we can style a component?
	//using style= {{}}
	//using className=“”
	//using styled component
	//bootstrap classes


Q. How to handle a click event in react?
	//<input type='submit' value='Submit' onClick={this.showValue} />
	//Always we mention the function name , react will internally check if its a function it is going to call it..

Q. How many ways we can retrieve the values from a textbook?
	//ref and this.refs
	//onChange event - getting event.target.value and then saving it to a state variable
	//using createRef()
	
Q. What is this.props.children?
Q. What is the difference between <App> </App> and <App />?
Q. What are controlled components?
	//A component that controls the input elements within the forms on subsequent user input is called Controlled Component, 
	i.e, every state mutation will have an associated handler function.
	//For example, to write all the names in uppercase letters, we use handleChange as below,
	//onChange..
	handleChange(event) {
 		 this.setState({value: event.target.value.toUpperCase()})
	}
	
	In most cases, it's recommend to use controlled components to implement forms.


Q. What are uncontrolled components?
	//The Uncontrolled Components are the ones that store their own state internally, 
	and you query the DOM using a ref to find its current value when you need it. 
	This is a bit more like traditional HTML.

Q. What is Lifting State Up in React?
	When several components need to share the same changing data 
	then it is recommended to lift the shared state up to their closest common ancestor. 
	That means if two child components share the same data from its parent, 
	then move the state to parent instead of maintaining local state in both of the child components.

Q. What are the different phases of component lifecycle?
	//mounting,updating,unmounting
	
Q. How to write comments in React?
	{/* Multi-line comments for more than
   	one line */}
	{/* single line comment *}
	
Q. How to set state with a dynamic key name?
	If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with computed property names.

	handleInputChange(event) {
 	 this.setState({ [event.target.id]: event.target.value })
	}


Q. What is the purpose of using super constructor with props argument?
	A child class constructor cannot make use of this reference until super() method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to super() call is to access this.props in your child constructors.

	Passing props:
	class MyComponent extends React.Component {
  		constructor(props) {
    			super(props)
    			console.log(this.props) // prints { name: 'John', age: 42 }
  		}
	}

	Not passing props:
	class MyComponent extends React.Component {
  		constructor(props) {
    			super()
			console.log(this.props) // prints undefined
    			// but props parameter is still available
    			console.log(props) // prints { name: 'John', age: 42 }
  		}

  		render() {
   			// no difference outside constructor
    			console.log(this.props) // prints { name: 'John', age: 42 }
  		}
	}
	The above code snippets reveals that this.props is different only within the constructor. 
	It would be the same outside the constructor.

Q. What is the difference between super() and super(props) in React using ES6 classes?
Q. Can you force a component to re-render without calling setState?

Q. How do you access props in attribute quotes?
	React (or JSX) doesn't support variable interpolation inside an attribute value. 
	The below representation won't work:
	<img className='image' src='images/{this.props.image}' />

	But you can put any JS expression inside curly braces as the entire attribute value. 
	So the below expression works:
	<img className='image' src={'images/' + this.props.image} />

	Using template strings will also work:
	<img className='image' src={`images/${this.props.image}`} />
	
Q. How to conditionally apply class attributes?
	You shouldn't use curly braces inside quotes because it is going to be evaluated as a string.
	<div className="btn-panel {this.props.visible ? 'show' : 'hidden'}">

	Instead you need to move curly braces outside (don't forget to include spaces between class names):
	<div className={'btn-panel ' + (this.props.visible ? 'show' : 'hidden')}>

	Template strings will also work:
	<div className={`btn-panel ${this.props.visible ? 'show' : 'hidden'}`}>
	
Q. What is <></> ?
Q. What is React.Fragment?
Q. When we will go for <></> or React.Fragment? One live example…



Q. What is the library required for routing?
	//react-router-dom
Q. How many ways we can achieve routing?
	//2 ways - HashRouting,  BrowserRouting
Q. What components are we using from “react-router-dom”?
	//HashRouter,BrowserRouter, Route
Q. Route component which attributes we use for routing?
	//path, component, exact etc..
Q. Difference between HashRouter and BrowserRouter?
	//We use anchor tags with href as “#/urlpath” for HashRouter
	//We use ul li without # i.e. Link to="/urlpath"

	Note :: the Router path should match exactly to this urlpath
Q. We have to wrap all Route configuration along with the anchors or all Route configuration along with the ul li inside a single wrapper div. Is it true or false?
	//true
Q. What is the difference between HashRouter and BrowserRouter?

Q. What is the difference between a class state variable and a function state variable(hooks)?
	//we always have to create an object in class state variable..
	//But we can use any value for functional state variable..
		number,string,object,array,boolean etc

	//Also in a class we can maintain any number of state variable..
	//But using useState() we create a single..

Q. What the useState() call do?
	//It returns an array with exactly 2 element
	//first element is current state name..we can just name it anything..
	//second element is the seState() method for this.. We can use any name

Q. Inside a functional component how we can display a state variable if below is the state?
	const [name,showName] = React.useState(“soumya”);
	//<div>{name}</div>

	const name = React.useState(“soumya”);
	//<div>{name[0]}</div>


	const [data,showData] = React.useState({a : 1, b : 2});
	//<div>{data.a}</div>




Q. How we can pass data from a parent to child?
	//parent omponent can pass using attribute while instantiating e.g. <child name="soumya" />
	//using this.props a child can receive e.g. {this.props.name}
	
Q. 
	
Q. How we can pass data from a child to parent?
	//using event delegation
	//we can define a method in parent class with some arguments that child will be passing while calling this method
	//We pass this method like an attribute - same flow like parent to child..
		fnGetName(name){
			this.setState({name})
		}
		<child fnGetName={this.fnGetName} />
		
	//Inside child on any event for example button click we have the name and we have to send it to parent 
	//From child we will use this.props.fnGetName() and we can call this as a callback and pass the value...
		...
		fnsubmit(){
			this.props.fnGetName(this.refs.name.value)
		}
		render(){
			return <div>
					<input type="text" ref="name" />
					<input type="button" onClick={this.fnsubmit} /> 
				</div>
		}
		....
		
		
Q. From parent to child one level down we can get the data via this.props..
	But suppose I have a requirement like A -> ((B -> D -> E -> F -> G) , (C))
	multiple hierarchies are there...
	Suppose I want to pass data from A to G
	We are not going to pass data everytime to the children A to B , B to D , D to E, E to F and F to G..not a good idea.
	What is the solution?

	//We will go for context..
	
Q. So what are the steps involved while passing data using context?
	//3 steps React.createContext(), ctx.Provider, ctx.Consumer
	//1. We have to create the context..
		const ctx=React.createContext();
	//2. My parent component has to provide the data to the context
		<ctx.Provider value={this.name}>
                	<B />
             	</ctx.Provider>
	//3. All my remaining children components should have to consume the data from the context..
		//While consuming we get a callback method with one argument..
 		<ctx.Consumer>
                   {
                       (data)=>{
                            return <div>{data}</div>
                       }
                   }
                </ctx.Consumer>
		
Q. How to send multiple data in context?
	//we can create an object and send that in value attribute
		<ctx.Provider value={this.obj}>
                	<B />
             	</ctx.Provider>
	
	
Q. What are the lfe cycle methods available in react?
	
Q. Is life cycle methods avaiable only for class components?
	//yes, for functional components we can use hooks
	
Q. What is the default value for my shouldComponentUpdate() return?//true

Q. Can we unmount a component explicitly? 
	//using conditional rendering..
	{this.state.isShow && <App /> }
	{this.state.isShow ? <App /> : <OtherComp /> }
	
Q. On intial load or first time what all life cycle methods are triggered?
	//constructor()
	//componentWillMount() - deprecated
	//getDerivedStateFromProps()
	//render()
	//componentDidMount()

Q. If we defined only componentWillMount() will it be triggerred or there will be any error as it is deprecated?
	//we must be getting a warning if we have written only componentWillMount() and not getDerivedStateFromProps()
	Lets check the browser console..
	react-dom.development.js:12503 Warning: componentWillMount has been renamed, and is not recommended for use. 
	See https://fb.me/react-unsafe-component-lifecycles for details.
	
Q. If we have defined both the methods in the class component i.e. componentWillMount() and getDerivedStateFromProps() then will it give error?
	//yes
	//react-dom.development.js:524 Warning: Unsafe legacy lifecycles will not be called for components using new component APIs.

Q. What is the syntax of getDerivedStateFromProps()?
	//It taks 2 arguments..
	//1st one is props and 2nd is state
	//it is a static method
	//getDerivedStateFromProps() is working like componentWillMount() on initial load
	//getDerivedStateFromProps() is woring like componentWillUpdate() on state update
	//getDerivedStateFromProps() is woring like componentWillReceiveProps() on props change
	//must have to return an object..That is same as state object. 
	//If we are not going to return state then we can return null
	
Q. How many static life cycle methods are there?
	//2
	//getDerivedStateFromProps()
	//getDerivedStateFromErrors()
	
Q. Is it is mandatory to return one object otherwise null from within getDerivedStateFromProps()?
	//yes otherwise we will get error
	react-dom.development.js:524 Warning: App.getDerivedStateFromProps(): 
		A valid state object (or null) must be returned. You have returned undefined.
		
Q. On state update what all life cycle methods are triggered?
	If getDerivedStateFromProps() is not available, but getSnapshotBeforeUpdate() is available
	============================================================================================
	shouldComponentUpdate()
	//componentWillUpdate()
	render()
	getSnapshotBeforeUpdate()
	componentDidUpdate()
	setstate()
	
	If getDerivedStateFromProps() is available and also componentWillUpdate() also available
	============================================================================================
	getDerivedStateFromProps()
	shouldComponentUpdate()
	//componentWillUpdate()
	render()
	getSnapshotBeforeUpdate()
	componentDidUpdate()
	setState() callback..
	
	NOTE**
	If we have componentWillUpdate() then it is triggered after shouldComponentUpdate()
	If we have getDerivedStateFromProps() then it is triggered before shouldComponentUpdate()

Q. On state update in parent and props changes in child what all life cycle methods are triggered?
	getDerivedStateFromProps()
	shouldComponentUpdate()
	//componentWillUpdate()
	render()
	//componentWillReceiveProps()
	getDerivedStateFromProps() - child
	render() - child
	getSnapshotBeforeUpdate()
	componentDidUpdate()

Q. If my shouldComponentUpdate() returns true then what all life cycle methods executed ?
	//getDerivedStateFromProps()
	//shouldComponentUpdate()
	//After this none of the methods gets executed..
	
	
	//getDerivedStateFromProps()
	//shouldComponentUpdate()
	//After the above all of the below methods gets executed..if shouldComponentUpdate() returns true
	//render()
	//getSnapshotBeforeUpdate()
	//componentDidUpdate()
	
Q. If my shouldComponentUpdate() returns false then what all life cycle methods executed ?
	//getDerivedStateFromProps()
	//shouldComponentUpdate()
	//After this none of the methods gets executed..
	

Q. getSnapshotBeforeUpdate() returns what?//previous state values
Q. As a children if you want to know which props are coming to me then?
	//getDervivedStateFromProps()
	//componentWillReceiveProps()
	
Q. What are the methods available for error boundary?
	// static getDerivedStateFromError(error) 
	// componentDidCatch(error,errorInfo)
	
Q. Why we go for context?//share data all my children
Q. What 3 things to remember for a context?
	//create the context, give the data, get the data
	
Q. How to create the context?//react.createContext()
Q. How to provide the data?//context.Provider value attribute
Q. How to provide the data?//context.Consumer with callback function

Q. What is useContext? //if we want to use context or consume with hooks
Q. useContext() takes how many arguments? //one what is that?// Context





Q.How many arguments reducer() method takes?//2
Q.What is 1st argument to reducer()?//state
Q.What is the 2nd argument to reducer()? //action
Q.From where reducer() will receive the 2nd argument action?	
	//from dispatch()
Q.How many ways we can get dispatch()?
Q.Why we go for React.Fragment?
Q.What is React.createElement()? Contains how many arguments? And what are they/
Q.Without jsx how we can create a component?
Q.What is this.props.children?
Q.How many ways we can handle exception?
Q.How many static life cycle methods are available in React?
Q.Why we cannot update setState() from within getDerivedStateFromError()?
	//my this is not available within the static context..
Q.When my getDerivedStateFromError() is going to trigger?
Q.Where we are going to override getDerivedStateFromError()?
Q.How many ways we can write setState()?//3 ways
Q.When we go for setState() with callback function?
	//my setState() is async..
	//If I want to perform some operation once my state is updated then we can do here..
Q.What variables are coming from React.Component?
Q.What is my lifecycle structure? For both class component and functional component?
Q.state updated life cycle methods are what??
Q.

Q.What is the structure of HOC?
Q.Why we go for HOC?//reusability
Q. How to create props proxy for HOC component?
	You can add/edit props passed to the component using props proxy pattern like this:

	function HOC(WrappedComponent) {
	  return class Test extends Component {
 	   render() {
 	     const newProps = {
  	      title: 'New Header',
   	      footer: false,
   	      showFeatureX: false,
   	      showFeatureY: true
      	     }

      	   return <WrappedComponent {...this.props} {...newProps} />
    	 }
       }
     }


Q.What is React.createRef()?

Q.Why we go for forward reference?
	//forwardRef() is required in case we want the createRef ref to be binded to a fucntional component...
	//If child class is a functional component then we must have to pass as "ref" attribute from parent..i.e. ref={this.myref}
	//So the whole child functional component we will give to React.forwardRef()
		React.forwardRef((props,ref)=>{ return <div><input ref={ref} /></div> })
	
	
	//If both are class components then in one class we use createRef() to create a reference and pass as an attribute to child with any name..i.e. refpropname={this.myref} 
	//In the child class we receive ref as this.props.<refpropname> whatever passed from parent..
	//Then in child we can assign it to any element using "ref" attribute i..e. ref={this.props.refpropname}

Q. What is useRef()?
	//for a class component we use createRef() for a reference and for a functional component we use useRef()
	//rest all flow is same..



======::==============================  Hooks ==============================::======

Q. What is a Hook? 
	//A Hook is a special function that lets you “hook into” React features.
	
Q. Why Hook names always start with use?

Q. What all hooks available for react?
	//React.useState()
	//React.useEffect()
	//React.useContext()
	//React.useRef() 
	//React.useReducer() 
	//React.Memo()
	
Q. What are the rules of hooks?
	//Only Call Hooks from React Functions
		//✅ Call Hooks from React function components.
		//✅ Call Hooks from custom Hooks.

Q. What is useState()?
	//It is to create a state variable for fucntional components
	//equivalent to this.state in class components
	
Q.How does React Hooks re-renders a function Component?
	//return stmt gets executed
	
Q. Which library is having useState()? 
	//React
	
Q. When would I use a Hook? 
	//If you write a function component and realize you need to add some state to it, 
		previously you had to convert it to a class. 
		Now you can use a Hook inside the existing function component.
	
Q. How many arguments useState() has?
	//only one argument value we can pass
	//that can be of any type..either string,number,boolean,object or array
	//Unlike with classes, the state doesn’t have to be an object.
	
Q. What does calling useState do?
	//This is to create a state variable and initialise it..

Q. What does useState() return? 
	// It returns a pair of values: the current state and a function that updates it. 
	This is why we write const [count, setCount] = useState(). 
	This is similar to this.state.count and this.setState in a class
	
Q. How we can create a state variable in functional components?
 	  const [count, setCount] = useState(0);
	  
Q. How we can read a state variable in functional components?
	  <p>You clicked {count} times</p>

Q. How we can update a state variable in functional components?
	  setCount(count+1)


Q. What does useEffect do?
	//By using this Hook, you tell React that your component needs to do something after render.
	
Q. Does useEffect() run after every render?
	//yes
	
Q. useEffect() is equivalent to which life cycle methods of class component?
	//componentDidMount()
	//comonentDidUpdate()
	//componentWillUnMount()
	
Q. code example of useEffect()? to demonstrate all the 3 lifecycle methods..
	 const TitleUpdateF =()=>{
     		const [cnt,updateCnt]=React.useState(0);
     		const [name,updateName]=React.useState('');
     		React.useEffect(()=>{
         		console.log('title udpate');
         		document.title="He clicked me " + cnt + "  time(s)"
			//this below return fucntion is used for componentWillUnMount()
         		return ()=>{
             			alert('am going to un mount');
         		}
     		},[cnt])
    		return <div>
            		<h1>Hook Compnent</h1>
            		<input onChange={(e)=>updateName(e.target.value)} />
            		<input type='button' value="click" onClick={()=>updateCnt(cnt+1)}  />
         	</div>
 	}
	 class App extends React.Component{
     constructor(){
         super();
         this.state={
             isShow:true
         }
     }
     fnUpdate(){
         this.setState({
             isShow:!this.state.isShow
         })
     }
     render(){
        return <div>
        <input type='button' value='toggle' onClick={this.fnUpdate.bind(this)} />
         {
             this.state.isShow && <TitleUpdateF />
         }
        </div>
     }
 }
  ReactDOM.render(<App />,document.getElementById('root'));


Q. What is useContext()?
	//In functional components also providing a context is same as class components..
	i.e. first 2 steps
	step1. creating a context => const ctx = React.createContext();
	step2. providing context data => <ctx.Provider value="soumya"><B/></ctx.Provider>
	
	step3. consuming the data is only different here..here we dont have callback function like ctx.Consumer
	i.e. const data = React.useContext(ctx)
	Then to print within render we can use {data}
	
Q. How many arguments useContext() takes?
	//only one argument that is context variable name

Q. What is useReducer()? Is it same as js reduce() method?
	
Q. How many arguments useReducer() takes?
	//2 arguments - reducer function, initialState

Q. How many arguments useReducer() method reducer() fucntion takes?
	//2 i.e. initialState and action
	//returns an updated state..
	i.e. const reducer1 = (state,action) => { return updatedState;}

Q. What useReducer() returns?
	// It returns a pair of values array destructuring: the current state and dispatch that is going to call reducer()
	
	const reducer1 = (state,action) => {}
	const reducer2 = (state,action) => {}
	let [currentState, dispatch] = React.useReducer(reducer1,initialState)
	
	**note :- here when we call dispatch() it will call reducer1..

Q. when we call dispatch({}) with passing one object it is received as?
	//second argument of reducer() function
	
Q. How we can make useReducer() global state available to all the components?
	//using context..
	//we can set context at root component i.e. App
	
	const ctx = React.createContext();
  	const initVal = {
    		name: 'sachin',
    		loc: 'mum',
  	};

  	const reducer = (state, action) => {
    		switch (action.type) {
      			case 'LOC':
        			state = {
          			...state,
          			loc: action.payload,
        			};
        			break;
    			}
    			return state;
  		};
  
  	const C = () => {
    		var ctxData = React.useContext(ctx);
    		return (
      			<h1>
        		Loc: {ctxData.state.loc}
      			</h1>
    		);
  	};
  
  	const B = () => {
    		const [loc, updateLoc] = React.useState('');
    		const ctxData = React.useContext(ctx);
    		return (
      			<h1>
        		B: Loc: <input onChange={(e) => updateLoc(e.target.value)} />
        		<input
          			type='button'
          			value='submit'
          			onClick={() => ctxData.dispatch({ type: 'LOC', payload: loc })}
        		/>
      			</h1>
    		);
  	};
	  
	 const App=()=>{
        	const [state,dispatch]=React.useReducer(reducer,initVal)
          	return <div>
            			<ctx.Provider value={{state,dispatch}}>
              				<A />
              				<B />
              				<C />
            			</ctx.Provider >
          		</div> 
   	 }
	 
	
Q. What is React.memo()?
Q. What is React.useCallback()?



======::==============================  Redux ==============================::======
Q. What are the core principles of Redux?
	//singe source of truth
	//state is read only
	//changes are made using pure functions
	
	
Q. What all libraries required to implement redux?
	//react : for react
	//redux : for store
	//react-redux : for establishing connection between a react and redux..
	
Q. What is connect() ?
	//It is a HOC to make a component to communicate with redux..
	//connect() is available in react-redux

Q. How many arguments connect() takes?
	//2 - both are functions
	//mapStateToProps()
	//mapDispatchToProps()
	
Q. In order to return the same component but with redux capability or to store we havt bind connect() with our component..How?
	//export default connect(mapStateToProps,mapDispatchToProps)(C);

Q. What is the syntax of mapStateToProps() when we override?
	mapStateToProps(state){
		return {
			key1 : value1,
			key2 : value2
			... : ...
			... : ...
			keyn : valuen
		}
	}
	
Q. mapStateToProps() returns?
	//an object always - state
	
Q. If we dont want state can we only send mapDispatchToProps()?
	//No we must have to pass null as  mapStateToProps() is the first argument to connect()
	//If we only call connect(mapDispatchToProps)(component), then mapDispatchToProps() will be treated as first argument 
	 	means it will be considered as returning state instead of dispatch..
	//export default connect(null,mapDispatchToProps)(C);
	
Q. Whatever state value returned from mapStateToProps() as an object..How we can use this within our component?
	mapStateToProps(state){
		return {
     			val1:state.reducer.stateVar1,
     			val2:state.reducer.stateVar2
  		}
	}

	We can use val1 and val2 like {this.props.val1} and {this.props.val2}
	
Q. What is the syntax of mapDispatchToProps() when we override?
	const mapDispatchToProps=(dispatch)=>{
  		return {
    			dispatch
  		}
	}
	
	
Q. mapDispatchToProps() returns?
	//an object always - having only one key and value i.e. and it is a dispatch method
	
Q. If we dont want dispatch and only state we need can we only send mapStateToProps()?
	//yes we can skip as it is second argument...
	//export default connect(mapStateToProps)(C);

Q. Whatever dispatch value returned from mapDispatchToProps() as an object..How we can use this within our component?
	//write outside of the class..
	const mapDispatchToProps=(dispatch)=>{
  		return {
    			dispatch:dispatch
  		}
	}
	
	//button click inside class..
	//We can use this.props.dispatch()
	 fnSetName(){
   		let name= this.refs.name.value;
   		this.props.dispatch({
      			type:'NAME',
      			payload:name
   		});
  	}
	
Q. Can I dispatch an action in reducer?
	//Dispatching an action within a reducer is an anti-pattern. 
	Your reducer should be without side effects, simply digesting the action payload and returning a new state object.
	Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.
	
Q. What is the difference between component and container in React Redux?
Q. How we can create a store?
	//using createStore() coming from redux library..

Q. createStore() is from which library?
	//redux
	
Q. How many arguments createStore() has?
	//2
	//1st is for reducer ie. combineReducer(r1,r2,..rn)
	//2nd is for middlewares ie. applyMiddleware(logger,thunk,sagaMiddleware)
	
Q. combineReducer() is coming from which library?
	//redux
	//import {combineReducers} from 'redux';
	//It takes one object as an argument
	//object will have many key value pairs where each key value represents a reducer..
	
Q. applyMiddleware() is coming from which library?
	//redux
	//import {createStore,applyMiddleware} from 'redux';
	//It can take n nuber of arguments.. each representing a middleware..
	//applyMiddleware(logger,thunk,sagaMiddleware)
	
Q. reducer() method is like a normal javascript function which gets called by the dispatch() method..
   How the redux will detect this function as a reducer()?
   	//for that only we are registering the reducer in createStore() first argument as combineReducer()
	
Q. How we can make the store available for all the components?
	//For this there is a component called Provider coming from "react-redux library..
	//This component expects a prop called store
	//So we will have to set this in the root component..
	//lets set this where we are doing ReactDom.render(<App />,document.getElementById('root'));

	ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));
	
Q. is it mandatory to pass attribute store from provider component to send our store?
	//Yes it is because the exact name Provider component is expecting as a prop
	
Q. Why we are not supposed to do async calls inside reducer?

Q. When we will go for actions?
	//When we want to do some async calls like db crud operations or anything like that we will go for actions..
	
Q. Tell me the overall flow of redux?
	//for async calls
	//component -> action -> servercall -> server(node) -> database(mongodb) --------------------
									       			    |
         component <- Store <- reducers <- actionaction <- servercall <- node <- database(mongodb) <-

	
	//if no async calls
	//component -> action -> reducer -> store -> component
									       

Q. What is an action? Why it is needed?
	//Suppose we want any async calls we can do it in component itself.. 
	But if we have to use same operation multiple places then it will repetation of code within the component..
	SO it is advisable to use action()
	
	If we do async calls in a reducer then it will not wait for the async operation to finish..and then return state..
	It will return the previous initial state as is..or undefined
	
	So basically we first perform async calls in action..
	Once we receive the response from db within callback then we call the reducer() using dispatch() and sending the response to update
	
	reducer() is a pure function and we are not supposed to do any asyc calls here..
	
Q. How many ways we can get dispatch() within my action() method?
	//by seding dispatch as an argument to the action() methd while calling
	//by using store - store.dispatch()
	
	
Q. What is bindActionCreator()?
	//allows to bind the dispatch method to my action so that it is directly available within action()...
	//bindActionCreators() returns one more function i.e. action function binding with dispatch..
	//Hence instead of calling the normal action method we need to call the bindActionCreators() returning action method
	const mapDispatchToProps=(dispatch)=>{
  		return {
       			photosAction:bindActionCreators(photosAction,dispatch)
  		}
	}
	//in this case we will use photosAction() returned from mapDispatchToProps() binded with dispatch
	//no need to pass as an argument..
		   this.props.photosAction();

	//Now our action method will have a returing fucntion with dispatch, and getState() as arguments..
	//We can use thsoe..
	const photosAction=()=>{
    		return (dispatch,getState)=>{
        		ServerCall.fnGetReq('http://jsonplaceholder.typicode.com/photos') 
        		.then((res)=>{
            			dispatch({
                			type:'PHOTOS',
                			payload:res.data
            			});
        		}) 
        		.catch((res)=>{
            			dispatch({
                			type:'PHOTOS',
                			payload:[]
            			});
        		})
    		}
	}
	
	And to make this bindActionCreators() wor we need to register thunk middleware 
	inside createStore()

	
Q. bindActionCreators() coming from which library?
	//from redux
	//import {bindActionCreators} from 'redux'

Q. What do you understand by thunk middleware? Why we need this middleware?
	//Redux Thunk middleware allows you to write action creators that return a function instead of an action. 
	//The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. 
	//The inner function receives the store methods dispatch and getState as parameters.
	
	A thunk is a function that wraps an expression to delay its evaluation.
	// calculation of 1 + 2 is immediate
	// x === 3
	let x = 1 + 2;

	// calculation of 1 + 2 is delayed
	// foo can be called later to perform the calculation
	// foo is a thunk!
	let foo = () => 1 + 2;
	
	
	====
	//action file name is userAction imported to container
	//dispatch we receive from mapDispatchToProps() from connect() 2nd argument
	//bindActionCreators() takes action file and dispatch and binds both and returns a new function..
	//Now in action file no need to pass dispatch as argument or get it from store..
	//We will receive as a inner function...
	
	//component file
	//const mapDispatchToProps =(dispatch) =>{
		userAction : bindActionCreators(userAction,dispatch);
	}
	
	
	//action file
	import ServerCall from '../services/ServerCall';
	const userAction=()=>{
    		return (dispatch,getState)=>{
        		//do server call here and use dispatch() to update state by calling reducer() after servercall success
    		}
	}
	export default userAction;
	
	//to make bindActionCreators() work we need to activate thunk
	//store file
	import thunk from 'redux-thunk'
	const store=createStore(rootReducer,applyMiddleware(logger,thunk,sagaMiddleware));
	
	
Q. Which library has bindActionCreators?
	//redux 
	
Q. What is redux saga?
	Sagas are implemented using generator functions (a new ES2015 feature). 
	Unlike normal functions which run to completion and return a final value, 
	generator functions can be paused and resumed on demand and can return (more accurately yield) multiple values.
	sagas are developed to replace action methods
	
Q. How we are going to register saga?What is syntax?
	//we have to pass as second argument to createStore() within applyMiddleware(saga)
	
	import createSagaMiddleware from 'redux-saga';
	const sagaMiddleware=createSagaMiddleware();

	const store=createStore(rootReducer,applyMiddleware(logger,thunk,sagaMiddleware));
	sagaMiddleware.run(rootSaga);
	
	
Q. Tell me the overall flow of redux saga?
	//for async calls
	//component -> saga -> servercall -> server(node) -> database(mongodb) --------------------
									       			    |
         component <- Store <- reducers <- actionaction <- servercall <- node <- database(mongodb) <-

	
	//if no async calls
	//component -> saga -> reducer -> store -> component
	
Q. What is a generator function?
Q. What is yield? 
Q. How a generator function is executed?
Q. What is put in redux saga?
	//put() is same as dispatch(), but put() is provided by saga effects. 
	//We have to use it within sga files to connect to services
	
Q. What is call() in redux saga?
	//Its like calling any async calls.. same as promise calls..
	//but instead of using then() catch() we use yield call()...it returns the response and we can assign it to a variable..
	    const res=yield call(ServerCall.fnGetReq,'https://jsonplaceholder.typicode.com/posts');

Q. What is all() in redux saga?
	//to register all methods to a single..
	import commentsSaga from './commentsSaga';
	import postsSaga from './postsSaga';
	import {all} from 'redux-saga/effects'
	function* rootSaga(){
   		return yield all([
        		commentsSaga(),
       		 	postsSaga()
    		]);
	}

	export default rootSaga;
	
Q. What are the differences between call and put in redux-saga?
Q. What are the differences between redux-saga and redux-thunk?

Q. How to set initial state in Redux?
	You need to pass initial state as second argument to createStore:

	const rootReducer = combineReducers({
  		todos: todos,
  		visibilityFilter: visibilityFilter
	})

	const initialState = {
		  todos: [{ id: 123, name: 'example', completed: false }]
	}

	const store = createStore(
  		rootReducer,
	        initialState
	)
	
	
Q. How to add multiple middlewares to Redux?
Q. What is the difference between the normal redux action or thunk flow from redux saga?
	//We register saga methods with a unique identity in every saga file..
	//We create a single saga method and export it..
	
	import {takeLatest,call,put} from 'redux-saga/effects'
	import ServerCall from '../services/ServerCall';
	function* getComments(){}
	function* updateComments(){}
	function* commentsSaga(){
    		yield takeLatest('GC',getComments);
    		yield takeLatest('UC',updateComments)
	}
	export default commentsSaga;
	
	//in redux saga from component we will have to call saga method using dispatch() and its based on it's unique identity..
	  store.dispatch({
      		type:'GP'	
    	  })
		
	//there is a method called all() available in 'redux-saga/effects'
	//This all() method is used to start all the sagas at once..This is called from a singe method which is exported..
	import {all} from 'redux-saga/effects'
		function* rootSaga(){
		   return yield all([
        		commentsSaga(),
        		postsSaga()
    		]);
	}

	export default rootSaga;

Q. what is difference between takeLatest() and takeEvery()?

Q. How to register saga within store?
	import rootSaga from './sagas/rootSaga';
	import createSagaMiddleware from 'redux-saga';

	const sagaMiddleware=createSagaMiddleware();

	const store=createStore(rootReducer,applyMiddleware(logger,thunk,sagaMiddleware));
	sagaMiddleware.run(rootSaga);
	

	
Q. How to add bootstrap to react?
	npm i bootstrap --save
	
	And in index.js 
	import 'bootstrap/dist/css/bootstrap.css';

	

Q. What is Redux Form?
Q. What are the main features of Redux Form?
Q. How to add validators to redux-form?

	
	
	
	
